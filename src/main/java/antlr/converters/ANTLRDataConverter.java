package antlr.converters;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class ANTLRDataConverter {

    public static final HashMap<String, Integer> ANTLR_TOKEN_2_INDEX = new HashMap<>() {{
        put("ABSTRACT", 1);
        put("ASSERT", 2);
        put("BOOLEAN", 3);
        put("BREAK", 4);
        put("BYTE", 5);
        put("CASE", 6);
        put("CATCH", 7);
        put("CHAR", 8);
        put("CLASS", 9);
        put("CONST", 10);
        put("CONTINUE", 11);
        put("DEFAULT", 12);
        put("DO", 13);
        put("DOUBLE", 14);
        put("ELSE", 15);
        put("ENUM", 16);
        put("EXTENDS", 17);
        put("FINAL", 18);
        put("FINALLY", 19);
        put("FLOAT", 20);
        put("FOR", 21);
        put("IF", 22);
        put("GOTO", 23);
        put("IMPLEMENTS", 24);
        put("IMPORT", 25);
        put("INSTANCEOF", 26);
        put("INT", 27);
        put("INTERFACE", 28);
        put("LONG", 29);
        put("NATIVE", 30);
        put("NEW", 31);
        put("PACKAGE", 32);
        put("PRIVATE", 33);
        put("PROTECTED", 34);
        put("PUBLIC", 35);
        put("RETURN", 36);
        put("SHORT", 37);
        put("STATIC", 38);
        put("STRICTFP", 39);
        put("SUPER", 40);
        put("SWITCH", 41);
        put("SYNCHRONIZED", 42);
        put("THIS", 43);
        put("THROW", 44);
        put("THROWS", 45);
        put("TRANSIENT", 46);
        put("TRY", 47);
        put("VOID", 48);
        put("VOLATILE", 49);
        put("WHILE", 50);
        put("MODULE", 51);
        put("OPEN", 52);
        put("REQUIRES", 53);
        put("EXPORTS", 54);
        put("OPENS", 55);
        put("TO", 56);
        put("USES", 57);
        put("PROVIDES", 58);
        put("WITH", 59);
        put("TRANSITIVE", 60);
        put("VAR", 61);
        put("YIELD", 62);
        put("RECORD", 63);
        put("SEALED", 64);
        put("PERMITS", 65);
        put("NON_SEALED", 66);
        put("DECIMAL_LITERAL", 67);
        put("HEX_LITERAL", 68);
        put("OCT_LITERAL", 69);
        put("BINARY_LITERAL", 70);
        put("FLOAT_LITERAL", 71);
        put("HEX_FLOAT_LITERAL", 72);
        put("BOOL_LITERAL", 73);
        put("CHAR_LITERAL", 74);
        put("STRING_LITERAL", 75);
        put("TEXT_BLOCK", 76);
        put("NULL_LITERAL", 77);
        put("LPAREN", 78);
        put("RPAREN", 79);
        put("LBRACE", 80);
        put("RBRACE", 81);
        put("LBRACK", 82);
        put("RBRACK", 83);
        put("SEMI", 84);
        put("COMMA", 85);
        put("DOT", 86);
        put("ASSIGN", 87);
        put("GT", 88);
        put("LT", 89);
        put("BANG", 90);
        put("TILDE", 91);
        put("QUESTION", 92);
        put("COLON", 93);
        put("EQUAL", 94);
        put("LE", 95);
        put("GE", 96);
        put("NOTEQUAL", 97);
        put("AND", 98);
        put("OR", 99);
        put("INC", 100);
        put("DEC", 101);
        put("ADD", 102);
        put("SUB", 103);
        put("MUL", 104);
        put("DIV", 105);
        put("BITAND", 106);
        put("BITOR", 107);
        put("CARET", 108);
        put("MOD", 109);
        put("ADD_ASSIGN", 110);
        put("SUB_ASSIGN", 111);
        put("MUL_ASSIGN", 112);
        put("DIV_ASSIGN", 113);
        put("AND_ASSIGN", 114);
        put("OR_ASSIGN", 115);
        put("XOR_ASSIGN", 116);
        put("MOD_ASSIGN", 117);
        put("LSHIFT_ASSIGN", 118);
        put("RSHIFT_ASSIGN", 119);
        put("URSHIFT_ASSIGN", 120);
        put("ARROW", 121);
        put("COLONCOLON", 122);
        put("AT", 123);
        put("ELLIPSIS", 124);
        put("WS", 125);
        put("COMMENT", 126);
        put("LINE_COMMENT", 127);
        put("IDENTIFIER", 128);
    }};
    public static final HashMap<Integer, String> ANTLR_INDEX_2_TOKEN = new HashMap<>() {{
        put(1, "ABSTRACT");
        put(2, "ASSERT");
        put(3, "BOOLEAN");
        put(4, "BREAK");
        put(5, "BYTE");
        put(6, "CASE");
        put(7, "CATCH");
        put(8, "CHAR");
        put(9, "CLASS");
        put(10, "CONST");
        put(11, "CONTINUE");
        put(12, "DEFAULT");
        put(13, "DO");
        put(14, "DOUBLE");
        put(15, "ELSE");
        put(16, "ENUM");
        put(17, "EXTENDS");
        put(18, "FINAL");
        put(19, "FINALLY");
        put(20, "FLOAT");
        put(21, "FOR");
        put(22, "IF");
        put(23, "GOTO");
        put(24, "IMPLEMENTS");
        put(25, "IMPORT");
        put(26, "INSTANCEOF");
        put(27, "INT");
        put(28, "INTERFACE");
        put(29, "LONG");
        put(30, "NATIVE");
        put(31, "NEW");
        put(32, "PACKAGE");
        put(33, "PRIVATE");
        put(34, "PROTECTED");
        put(35, "PUBLIC");
        put(36, "RETURN");
        put(37, "SHORT");
        put(38, "STATIC");
        put(39, "STRICTFP");
        put(40, "SUPER");
        put(41, "SWITCH");
        put(42, "SYNCHRONIZED");
        put(43, "THIS");
        put(44, "THROW");
        put(45, "THROWS");
        put(46, "TRANSIENT");
        put(47, "TRY");
        put(48, "VOID");
        put(49, "VOLATILE");
        put(50, "WHILE");
        put(51, "MODULE");
        put(52, "OPEN");
        put(53, "REQUIRES");
        put(54, "EXPORTS");
        put(55, "OPENS");
        put(56, "TO");
        put(57, "USES");
        put(58, "PROVIDES");
        put(59, "WITH");
        put(60, "TRANSITIVE");
        put(61, "VAR");
        put(62, "YIELD");
        put(63, "RECORD");
        put(64, "SEALED");
        put(65, "PERMITS");
        put(66, "NON_SEALED");
        put(67, "DECIMAL_LITERAL");
        put(68, "HEX_LITERAL");
        put(69, "OCT_LITERAL");
        put(70, "BINARY_LITERAL");
        put(71, "FLOAT_LITERAL");
        put(72, "HEX_FLOAT_LITERAL");
        put(73, "BOOL_LITERAL");
        put(74, "CHAR_LITERAL");
        put(75, "STRING_LITERAL");
        put(76, "TEXT_BLOCK");
        put(77, "NULL_LITERAL");
        put(78, "LPAREN");
        put(79, "RPAREN");
        put(80, "LBRACE");
        put(81, "RBRACE");
        put(82, "LBRACK");
        put(83, "RBRACK");
        put(84, "SEMI");
        put(85, "COMMA");
        put(86, "DOT");
        put(87, "ASSIGN");
        put(88, "GT");
        put(89, "LT");
        put(90, "BANG");
        put(91, "TILDE");
        put(92, "QUESTION");
        put(93, "COLON");
        put(94, "EQUAL");
        put(95, "LE");
        put(96, "GE");
        put(97, "NOTEQUAL");
        put(98, "AND");
        put(99, "OR");
        put(100, "INC");
        put(101, "DEC");
        put(102, "ADD");
        put(103, "SUB");
        put(104, "MUL");
        put(105, "DIV");
        put(106, "BITAND");
        put(107, "BITOR");
        put(108, "CARET");
        put(109, "MOD");
        put(110, "ADD_ASSIGN");
        put(111, "SUB_ASSIGN");
        put(112, "MUL_ASSIGN");
        put(113, "DIV_ASSIGN");
        put(114, "AND_ASSIGN");
        put(115, "OR_ASSIGN");
        put(116, "XOR_ASSIGN");
        put(117, "MOD_ASSIGN");
        put(118, "LSHIFT_ASSIGN");
        put(119, "RSHIFT_ASSIGN");
        put(120, "URSHIFT_ASSIGN");
        put(121, "ARROW");
        put(122, "COLONCOLON");
        put(123, "AT");
        put(124, "ELLIPSIS");
        put(125, "WS");
        put(126, "COMMENT");
        put(127, "LINE_COMMENT");
        put(128, "IDENTIFIER");
    }};

    public static int[] mapTokenToIds(String sourceCode) {
        List<Integer> idList = new ArrayList<>();
        for (String token : sourceCode.split(" ")) {
            if (token.equals("SOS") || token.equals("EOS")) {
                continue;
            }
            idList.add(ANTLR_TOKEN_2_INDEX.get(token));
        }
        return idList.stream().mapToInt(Integer::intValue)
                .toArray();
    }

    public static String mapIdsToToken(int[] sequence) {
        List<String> idList = new ArrayList<>();
        for (int id : sequence) {
            if (id == 0 || id == 1) {
                continue;
            }
            idList.add(ANTLR_INDEX_2_TOKEN.get(id));
        }
        return String.join(" ", idList);
    }
}

